#!/usr/bin/env python3
"""
Convert a verbose layout.json (exported by the main app) into a compact
layout_data.js module used by the optimized /chart page.

Output JS entries: [ geomKey, rowIndex(0..3), px, py, pz, rx, ry, rz ]
Row indices mapping:
    0: chart-row-vest-up
    1: chart-row-oclu-up
    2: chart-row-oclu-low
    3: chart-row-vest-low

Usage (PowerShell):
    python tools/convert_layout.py layout.json
This writes static/js/layout_data.js
"""
from __future__ import annotations
import json
import sys
import os
from typing import Any, Dict, List

ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
OUT_PATH = os.path.join(ROOT, 'static', 'js', 'layout_data.js')

ROW_INDEX: Dict[str, int] = {
    'chart-row-vest-up': 0,
    'chart-row-oclu-up': 1,
    'chart-row-oclu-low': 2,
    'chart-row-vest-low': 3,
}


def main() -> int:
    if len(sys.argv) < 2:
        print('Usage: python tools/convert_layout.py <layout.json>')
        return 2

    in_path = sys.argv[1]
    with open(in_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    views = data.get('views', {})
    chart = views.get('chart', {})
    teeth: Dict[str, List[Dict[str, Any]]] = chart.get('teeth', {})

    entries: List[List[Any]] = []
    count_skipped = 0

    for placements in teeth.values():
        if not isinstance(placements, list):
            continue
        for place in placements:
            row_name = place.get('inRow') or ''
            row_idx = ROW_INDEX.get(row_name)
            if row_idx is None:
                count_skipped += 1
                continue
            parts = place.get('parts', [])
            for part in parts:
                geom = part.get('id') or part.get('name')
                t = part.get('transformLocal') or part.get('transformWorld')
                if not geom or not t:
                    count_skipped += 1
                    continue
                p = t.get('position') or {}
                r = t.get('rotation') or {}
                entries.append([
                    str(geom),
                    int(row_idx),
                    float(p.get('x', 0.0)),
                    float(p.get('y', 0.0)),
                    float(p.get('z', 0.0)),
                    float(r.get('x', 0.0)),
                    float(r.get('y', 0.0)),
                    float(r.get('z', 0.0)),
                ])

    # Write JS module
    os.makedirs(os.path.dirname(OUT_PATH), exist_ok=True)
    with open(OUT_PATH, 'w', encoding='utf-8') as f:
        f.write('// Auto-generated by tools/convert_layout.py\n')
        f.write('// Compact: [geomKey,rowIndex,px,py,pz,rx,ry,rz]\n')
        f.write('export const LAYOUT_DATA = ')
        json.dump(entries, f, ensure_ascii=False)
        f.write(';\n')

    print(
        f'Wrote {OUT_PATH} with {len(entries)} entries. '
        f'Skipped: {count_skipped}'
    )
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
